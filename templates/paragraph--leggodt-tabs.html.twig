{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('leggodt/tabs') }}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}
{% set paragraph_id = 'tab-' ~ paragraph.id.value  %}

<div{{ attributes.addClass(classes).setAttribute('id', paragraph_id).setAttribute('role', 'tablist').setAttribute('aria-multiselectable', 'true') }}>
    <ul class="nav nav-tabs" role="tablist">
        {% for key, item in content.leggodt_tabs_sections if key|first != '#' %}
            <li role="presentation" class="{% if loop.first %}active{% endif %}">
                <a href="#tab-{{ key }}" aria-controls="{{ item['#paragraph'].leggodt_heading_text.value }}" role="tab" data-toggle="tab">
                    {{ item['#paragraph'].leggodt_heading_text.value }}
                </a>
            </li>
        {% endfor %}
    </ul>
    {% for key, item in content.leggodt_tabs_sections if key|first != '#' %}
        <div id="tab-{{ key }}" class="tab-pane{% if loop.first %} active{% endif %}" role="tabpanel">
            {% for body_key, body_item in item['#paragraph'].leggodt_section_content %}
                {% set section_body = item %}
                {% set section_body = section_body|merge({'#paragraph': section_body['#paragraph'].leggodt_section_content[body_key].entity}) %}
                {% set section_body = section_body|merge({'#cache': {}}) %}
                {{ section_body }}
            {% endfor %}
        </div>
    {% endfor %}
</div>
